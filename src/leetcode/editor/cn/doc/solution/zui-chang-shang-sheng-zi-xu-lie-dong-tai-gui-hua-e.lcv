### 动态规划

子序列的问题->动态规划。

- 使用数组 `cell` 保存每步子问题的最优解。
- `cell[i]` 代表含第 `i` 个元素的最长上升子序列的长度。
- 求解 `cell[i]` 时，向前遍历找出比 `i` 元素小的元素 `j`，令 `cell[i]` 为 `max（cell[i],cell[j]+1)`。

详情可以参照官方题解。

* [-Python]

```python
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if nums == []:
            return 0
        cell = [1]
        for i in range(1,len(nums)):
            cell.append(1)
            for j in range(i):
                if(nums[j] < nums[i]):
                    cell[i] = max(cell[i], cell[j]+1)
        return max(cell)
```

复杂度分析：

时间复杂度：$O(n2)$，双层遍历

空间复杂度：$O(n)$

### 动态规划+二分查找

很具小巧思。新建数组 `cell`，用于保存最长上升子序列。

对原序列进行遍历，将每位元素二分插入 `cell` 中。
- 如果 `cell` 中元素都比它小，将它插到最后
- 否则，用它覆盖掉比它大的元素中最小的那个。

总之，思想就是让 `cell` 中存储比较小的元素。这样，`cell` 未必是真实的最长上升子序列，但长度是对的。

* [-Python]

```python
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        size = len(nums)
        if size<2:
            return size
        
        cell = [nums[0]]
        for num in nums[1:]:
            if num>cell[-1]:
                cell.append(num)
                continue
            
            l,r = 0,len(cell)-1
            while l<r:
                mid = l + (r - l) // 2
                if cell[mid]<num:
                    l = mid + 1
                else:
                    r = mid
            cell[l] = num
        return len(cell)
```

