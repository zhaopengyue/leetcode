> Problem: [670. 最大交换](https://leetcode.cn/problems/maximum-swap/description/)

[TOC]

# 解法A

这个算法的关键是使用数组 lastPos 记录每个数字最后一次出现的位置。然后，遍历字符串中的每个数字，在其后找到比它大的最大数字，进行交换。这样可以保证得到的整数是最大的。

> 时间复杂度$O(n)$
> ![image.png](https://pic.leetcode.cn/1705908270-Shtccr-image.png)

* []

```C++
class Solution {
public:
    int maximumSwap(int num) {
        auto str = to_string(num);

        vector<int> lastPos(10, -1);
        for (int i = 0; i < str.size(); i++) {
            lastPos[str[i] - '0'] = i;
        }

        for (int i = 0; i < str.size(); i++) {
            for (int d = 9; d > str[i] - '0'; d--) {
                if (lastPos[d] > i) {
                    swap(str[i], str[lastPos[d]]);
                    return stoi(str);
                }
            }
        }
        
        return num;
    }
};
```

# 解法B

使用选择排序，但是只排一次

> 时间复杂度$O(n^2)$
> ![image.png](https://pic.leetcode.cn/1705908472-PprAWe-image.png)

* []

```C++
class Solution {
public:
    int maximumSwap(int num) {
        auto str = to_string(num);
        for (auto it{ str.begin()}; it != str.end() - 1; it++)
        {
            auto max{ it };
            for (auto _it{ it + 1 }; _it != str.end(); _it++)
            {
                if (*max <= *_it)
                {
                    max = _it;
                }
            }
            if (max != it && *max != *it)
            {
                swap(*max, *it);
                break;
            }
        }
        return stoi(str);
    }
};
```

